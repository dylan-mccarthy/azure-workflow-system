// <auto-generated />
using System;
using AzureWorkflowSystem.Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AzureWorkflowSystem.Api.Migrations
{
    [DbContext(typeof(WorkflowDbContext))]
    partial class WorkflowDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AzureWorkflowSystem.Api.Models.Attachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BlobUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<long>("FileSizeBytes")
                        .HasColumnType("bigint");

                    b.Property<int>("TicketId")
                        .HasColumnType("integer");

                    b.Property<int>("UploadedById")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TicketId");

                    b.HasIndex("UploadedById");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("AzureWorkflowSystem.Api.Models.AuditLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Details")
                        .HasColumnType("text");

                    b.Property<string>("NewValues")
                        .HasColumnType("text");

                    b.Property<string>("OldValues")
                        .HasColumnType("text");

                    b.Property<int?>("TicketId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TicketId");

                    b.HasIndex("UserId");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("AzureWorkflowSystem.Api.Models.SlaConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ResolutionTimeMinutes")
                        .HasColumnType("integer");

                    b.Property<int>("ResponseTimeMinutes")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Priority", "Category")
                        .IsUnique();

                    b.ToTable("SlaConfigurations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "Incident",
                            CreatedAt = new DateTime(2025, 6, 25, 1, 12, 7, 880, DateTimeKind.Utc).AddTicks(2189),
                            IsActive = true,
                            Priority = "Critical",
                            ResolutionTimeMinutes = 240,
                            ResponseTimeMinutes = 15,
                            UpdatedAt = new DateTime(2025, 6, 25, 1, 12, 7, 880, DateTimeKind.Utc).AddTicks(2190)
                        },
                        new
                        {
                            Id = 2,
                            Category = "Incident",
                            CreatedAt = new DateTime(2025, 6, 25, 1, 12, 7, 880, DateTimeKind.Utc).AddTicks(2194),
                            IsActive = true,
                            Priority = "High",
                            ResolutionTimeMinutes = 480,
                            ResponseTimeMinutes = 30,
                            UpdatedAt = new DateTime(2025, 6, 25, 1, 12, 7, 880, DateTimeKind.Utc).AddTicks(2194)
                        },
                        new
                        {
                            Id = 3,
                            Category = "Incident",
                            CreatedAt = new DateTime(2025, 6, 25, 1, 12, 7, 880, DateTimeKind.Utc).AddTicks(2195),
                            IsActive = true,
                            Priority = "Medium",
                            ResolutionTimeMinutes = 1440,
                            ResponseTimeMinutes = 60,
                            UpdatedAt = new DateTime(2025, 6, 25, 1, 12, 7, 880, DateTimeKind.Utc).AddTicks(2195)
                        },
                        new
                        {
                            Id = 4,
                            Category = "Incident",
                            CreatedAt = new DateTime(2025, 6, 25, 1, 12, 7, 880, DateTimeKind.Utc).AddTicks(2196),
                            IsActive = true,
                            Priority = "Low",
                            ResolutionTimeMinutes = 2880,
                            ResponseTimeMinutes = 120,
                            UpdatedAt = new DateTime(2025, 6, 25, 1, 12, 7, 880, DateTimeKind.Utc).AddTicks(2196)
                        },
                        new
                        {
                            Id = 5,
                            Category = "Alert",
                            CreatedAt = new DateTime(2025, 6, 25, 1, 12, 7, 880, DateTimeKind.Utc).AddTicks(2197),
                            IsActive = true,
                            Priority = "Critical",
                            ResolutionTimeMinutes = 120,
                            ResponseTimeMinutes = 10,
                            UpdatedAt = new DateTime(2025, 6, 25, 1, 12, 7, 880, DateTimeKind.Utc).AddTicks(2197)
                        },
                        new
                        {
                            Id = 6,
                            Category = "Alert",
                            CreatedAt = new DateTime(2025, 6, 25, 1, 12, 7, 880, DateTimeKind.Utc).AddTicks(2197),
                            IsActive = true,
                            Priority = "High",
                            ResolutionTimeMinutes = 240,
                            ResponseTimeMinutes = 15,
                            UpdatedAt = new DateTime(2025, 6, 25, 1, 12, 7, 880, DateTimeKind.Utc).AddTicks(2198)
                        },
                        new
                        {
                            Id = 7,
                            Category = "Access",
                            CreatedAt = new DateTime(2025, 6, 25, 1, 12, 7, 880, DateTimeKind.Utc).AddTicks(2198),
                            IsActive = true,
                            Priority = "Medium",
                            ResolutionTimeMinutes = 1440,
                            ResponseTimeMinutes = 240,
                            UpdatedAt = new DateTime(2025, 6, 25, 1, 12, 7, 880, DateTimeKind.Utc).AddTicks(2199)
                        },
                        new
                        {
                            Id = 8,
                            Category = "NewResource",
                            CreatedAt = new DateTime(2025, 6, 25, 1, 12, 7, 880, DateTimeKind.Utc).AddTicks(2199),
                            IsActive = true,
                            Priority = "Medium",
                            ResolutionTimeMinutes = 2880,
                            ResponseTimeMinutes = 480,
                            UpdatedAt = new DateTime(2025, 6, 25, 1, 12, 7, 880, DateTimeKind.Utc).AddTicks(2200)
                        });
                });

            modelBuilder.Entity("AzureWorkflowSystem.Api.Models.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AlertId")
                        .HasColumnType("text");

                    b.Property<int?>("AssignedToId")
                        .HasColumnType("integer");

                    b.Property<string>("AzureResourceId")
                        .HasColumnType("text");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("ClosedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CreatedById")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsSlaBreach")
                        .HasColumnType("boolean");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("ResolvedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("SlaTargetDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AssignedToId");

                    b.HasIndex("CreatedById");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("AzureWorkflowSystem.Api.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 6, 25, 1, 12, 7, 880, DateTimeKind.Utc).AddTicks(2259),
                            Email = "admin@azureworkflow.com",
                            FirstName = "System",
                            IsActive = true,
                            LastName = "Administrator",
                            Role = "Admin",
                            UpdatedAt = new DateTime(2025, 6, 25, 1, 12, 7, 880, DateTimeKind.Utc).AddTicks(2260)
                        });
                });

            modelBuilder.Entity("AzureWorkflowSystem.Api.Models.Attachment", b =>
                {
                    b.HasOne("AzureWorkflowSystem.Api.Models.Ticket", "Ticket")
                        .WithMany("Attachments")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AzureWorkflowSystem.Api.Models.User", "UploadedBy")
                        .WithMany()
                        .HasForeignKey("UploadedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Ticket");

                    b.Navigation("UploadedBy");
                });

            modelBuilder.Entity("AzureWorkflowSystem.Api.Models.AuditLog", b =>
                {
                    b.HasOne("AzureWorkflowSystem.Api.Models.Ticket", "Ticket")
                        .WithMany("AuditLogs")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AzureWorkflowSystem.Api.Models.User", "User")
                        .WithMany("AuditLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Ticket");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AzureWorkflowSystem.Api.Models.Ticket", b =>
                {
                    b.HasOne("AzureWorkflowSystem.Api.Models.User", "AssignedTo")
                        .WithMany("AssignedTickets")
                        .HasForeignKey("AssignedToId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("AzureWorkflowSystem.Api.Models.User", "CreatedBy")
                        .WithMany("CreatedTickets")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AssignedTo");

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("AzureWorkflowSystem.Api.Models.Ticket", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("AuditLogs");
                });

            modelBuilder.Entity("AzureWorkflowSystem.Api.Models.User", b =>
                {
                    b.Navigation("AssignedTickets");

                    b.Navigation("AuditLogs");

                    b.Navigation("CreatedTickets");
                });
#pragma warning restore 612, 618
        }
    }
}
