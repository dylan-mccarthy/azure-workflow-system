# Continuous Integration workflow
# Runs on all pull requests and pushes to main branch
# Performs linting, testing, and validation

name: CI - Continuous Integration

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  lint-and-test:
    name: Lint, Format, and Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Check Prettier formatting
        run: npm run format:check

      - name: Run unit tests
        run: npm test

      - name: Generate test coverage report
        run: npm run test:coverage

      - name: Upload coverage to Codecov (optional)
        if: github.event_name == 'push'
        uses: codecov/codecov-action@v4
        with:
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

  validate-infrastructure:
    name: Validate Bicep Infrastructure
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Bicep CLI
        run: |
          # Install Bicep CLI directly
          curl -Lo bicep https://github.com/Azure/bicep/releases/latest/download/bicep-linux-x64
          chmod +x ./bicep
          sudo mv ./bicep /usr/local/bin/bicep
          bicep --version

      - name: Validate Bicep files
        run: |
          echo "Validating Bicep templates..."
          bicep build infra/main.bicep

      - name: Check Bicep linting
        run: |
          echo "Running Bicep linter..."
          bicep lint infra/main.bicep

          # Lint all module files
          for file in infra/modules/*.bicep; do
            if [ -f "$file" ]; then
              echo "Linting $file..."
              bicep lint "$file"
            fi
          done

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  build-api:
    name: Build and Test .NET API
    runs-on: ubuntu-latest
    needs: [lint-and-test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore NuGet packages
        run: dotnet restore src/api/AzureWorkflowSystem.Api/AzureWorkflowSystem.Api.csproj

      - name: Build API application
        run: dotnet build src/api/AzureWorkflowSystem.Api/AzureWorkflowSystem.Api.csproj --configuration Release --no-restore

      - name: Restore test project packages
        run: dotnet restore src/tests/AzureWorkflowSystem.Api.Tests/AzureWorkflowSystem.Api.Tests.csproj

      - name: Build test project
        run: dotnet build src/tests/AzureWorkflowSystem.Api.Tests/AzureWorkflowSystem.Api.Tests.csproj --configuration Release --no-restore

      - name: Run unit tests
        run: dotnet test src/tests/AzureWorkflowSystem.Api.Tests/AzureWorkflowSystem.Api.Tests.csproj --configuration Release --no-build --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./coverage
        continue-on-error: true

      - name: Generate coverage report
        uses: danielpalme/ReportGenerator-GitHub-Action@5.2.0
        with:
          reports: coverage/**/coverage.cobertura.xml
          targetdir: coverage-report
          reporttypes: Html;Cobertura

      - name: Upload coverage reports to Codecov
        if: github.event_name == 'push'
        uses: codecov/codecov-action@v4
        with:
          file: coverage-report/Cobertura.xml
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Publish API application
        run: dotnet publish src/api/AzureWorkflowSystem.Api/AzureWorkflowSystem.Api.csproj --configuration Release --no-build --output ./publish

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dotnet-api-artifacts
          path: |
            ./publish
            coverage-report/
          retention-days: 30

  status-check:
    name: CI Status Check
    runs-on: ubuntu-latest
    needs: [lint-and-test, validate-infrastructure, security-scan, build-api]
    if: always()

    steps:
      - name: Check CI Results
        run: |
          echo "Lint and Test: ${{ needs.lint-and-test.result }}"
          echo "Infrastructure Validation: ${{ needs.validate-infrastructure.result }}"
          echo "Security Scan: ${{ needs.security-scan.result }}"
          echo "Build API: ${{ needs.build-api.result }}"

          if [[ "${{ needs.lint-and-test.result }}" != "success" ]] || 
             [[ "${{ needs.validate-infrastructure.result }}" != "success" ]] || 
             [[ "${{ needs.security-scan.result }}" != "success" ]] || 
             [[ "${{ needs.build-api.result }}" != "success" ]]; then
            echo "❌ CI pipeline failed - one or more checks did not pass"
            exit 1
          else
            echo "✅ All CI checks passed successfully"
          fi
