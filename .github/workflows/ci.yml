# Continuous Integration workflow
# Runs on all pull requests and pushes to main branch
# Performs linting, testing, and validation

name: CI - Continuous Integration

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  lint-and-test:
    name: Lint, Format, and Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Check Prettier formatting
        run: npm run format:check

      - name: Run unit tests
        run: npm test

      - name: Generate test coverage report
        run: npm run test:coverage

      - name: Upload coverage to Codecov (optional)
        if: github.event_name == 'push'
        uses: codecov/codecov-action@v4
        with:
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

  validate-infrastructure:
    name: Validate Bicep Infrastructure
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Azure CLI
        uses: azure/CLI@v2
        with:
          azcliversion: latest
          inlineScript: echo "Azure CLI setup complete"

      - name: Validate Bicep files
        run: |
          echo "Validating Bicep templates..."
          az bicep build --file infra/main.bicep

          # Note: What-if analysis requires actual resource groups and credentials
          # This will be enabled once Azure credentials are configured
          # echo "Running what-if analysis for dev environment..."
          # az deployment group what-if \
          #   --resource-group ${{ vars.AZURE_RESOURCE_GROUP_DEV }} \
          #   --template-file infra/main.bicep \
          #   --parameters @infra/parameters/dev.parameters.json

      - name: Check Bicep linting
        run: |
          echo "Running Bicep linter..."
          az bicep lint --file infra/main.bicep

          # Lint all module files
          for file in infra/modules/*.bicep; do
            echo "Linting $file..."
            az bicep lint --file "$file"
          done

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  build-api:
    name: Build API Application
    runs-on: ubuntu-latest
    needs: [lint-and-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build API application
        run: |
          echo "Building API application..."
          # This will be updated once we have the actual API code
          # npm run build:api

      - name: Create build artifact
        run: |
          mkdir -p build-artifacts
          echo "API build completed at $(date)" > build-artifacts/build-info.txt

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: api-build-artifacts
          path: build-artifacts/
          retention-days: 30

  status-check:
    name: CI Status Check
    runs-on: ubuntu-latest
    needs: [lint-and-test, validate-infrastructure, security-scan]
    if: always()

    steps:
      - name: Check CI Results
        run: |
          echo "Lint and Test: ${{ needs.lint-and-test.result }}"
          echo "Infrastructure Validation: ${{ needs.validate-infrastructure.result }}"
          echo "Security Scan: ${{ needs.security-scan.result }}"

          if [[ "${{ needs.lint-and-test.result }}" != "success" ]] || 
             [[ "${{ needs.validate-infrastructure.result }}" != "success" ]] || 
             [[ "${{ needs.security-scan.result }}" != "success" ]]; then
            echo "❌ CI pipeline failed - one or more checks did not pass"
            exit 1
          else
            echo "✅ All CI checks passed successfully"
          fi
