# Test workflow to validate CI/CD setup
# This workflow can be run manually to test the pipeline setup

name: Test CI/CD Setup

on:
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of test to run'
        required: true
        default: 'basic'
        type: choice
        options:
        - basic
        - bicep-validation
        - security-scan

jobs:
  test-basic:
    name: Basic Environment Test
    runs-on: ubuntu-latest
    if: github.event.inputs.test_type == 'basic' || github.event.inputs.test_type == ''
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Test Node.js setup
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Test linting
      run: |
        echo "Testing ESLint configuration..."
        npm run lint || echo "Linting completed with warnings/errors"
        
    - name: Test formatting
      run: |
        echo "Testing Prettier configuration..."
        npm run format:check || echo "Format check completed"
        
    - name: Test unit tests
      run: |
        echo "Running unit tests..."
        npm test || echo "Tests completed"
        
    - name: Test environment variables
      run: |
        echo "Checking workflow environment..."
        echo "GitHub Actor: ${{ github.actor }}"
        echo "GitHub Repository: ${{ github.repository }}"
        echo "GitHub Ref: ${{ github.ref }}"
        echo "GitHub SHA: ${{ github.sha }}"
        echo "Workflow triggered by: ${{ github.event_name }}"

  test-bicep:
    name: Test Bicep Validation
    runs-on: ubuntu-latest
    if: github.event.inputs.test_type == 'bicep-validation'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Azure CLI
      uses: azure/CLI@v2
      with:
        azcliversion: latest
        inlineScript: echo "Azure CLI setup complete"
        
    - name: Test Bicep compilation
      run: |
        echo "Testing Bicep template compilation..."
        
        # Test main template
        echo "Compiling main.bicep..."
        az bicep build --file infra/main.bicep --stdout > /dev/null
        echo "âœ… main.bicep compiled successfully"
        
        # Test all module files
        for file in infra/modules/*.bicep; do
          if [ -f "$file" ]; then
            echo "Compiling $(basename "$file")..."
            az bicep build --file "$file" --stdout > /dev/null
            echo "âœ… $(basename "$file") compiled successfully"
          fi
        done
        
    - name: Test Bicep linting
      run: |
        echo "Testing Bicep linting..."
        
        # Lint main template
        az bicep lint --file infra/main.bicep
        
        # Lint all modules
        for file in infra/modules/*.bicep; do
          if [ -f "$file" ]; then
            echo "Linting $(basename "$file")..."
            az bicep lint --file "$file"
          fi
        done
        
        echo "âœ… All Bicep templates passed linting"

  test-security:
    name: Test Security Scanning
    runs-on: ubuntu-latest
    if: github.event.inputs.test_type == 'security-scan'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'table'
        output: 'trivy-results.txt'
        
    - name: Display security scan results
      run: |
        echo "Security scan completed. Results:"
        if [ -f trivy-results.txt ]; then
          cat trivy-results.txt
        else
          echo "No security scan results file found"
        fi

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [test-basic, test-bicep, test-security]
    if: always()
    
    steps:
    - name: Generate test summary
      run: |
        echo "## ðŸ§ª CI/CD Setup Test Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Test Type:** ${{ github.event.inputs.test_type }}" >> $GITHUB_STEP_SUMMARY
        echo "**Triggered by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
        echo "**Test Time:** $(date -u)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "**Results:**" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ github.event.inputs.test_type }}" == "basic" ]; then
          echo "- Basic Environment Test: ${{ needs.test-basic.result }}" >> $GITHUB_STEP_SUMMARY
        elif [ "${{ github.event.inputs.test_type }}" == "bicep-validation" ]; then
          echo "- Bicep Validation Test: ${{ needs.test-bicep.result }}" >> $GITHUB_STEP_SUMMARY
        elif [ "${{ github.event.inputs.test_type }}" == "security-scan" ]; then
          echo "- Security Scan Test: ${{ needs.test-security.result }}" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "âœ… **CI/CD Setup validation completed**" >> $GITHUB_STEP_SUMMARY
